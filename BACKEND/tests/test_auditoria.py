#!/usr/bin/env python3
"""
Tests para los endpoints de Auditor√≠a
M√≥dulo: /api/v1/auditoria/
"""

import sys
import os

# Agregar el directorio padre al path para imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from test_base import APITestClient, print_test_header, print_response_info, validate_schema_fields


def test_auditoria_logs():
    """Test de logs de auditor√≠a"""
    print_test_header("Tests de Logs de Auditor√≠a")
    
    client = APITestClient()
    
    if not client.login():
        print("‚ùå No se pudo hacer login, saltando tests")
        return
    
    # Test 1: Obtener logs de auditor√≠a
    print("\n1Ô∏è‚É£ Test: Obtener logs de auditor√≠a")
    response = client.get("/auditoria/logs")
    print_response_info(response, "Obtener logs de auditor√≠a")
    
    if response.status_code == 200:
        logs = response.json()
        if isinstance(logs, list):
            print(f"‚úÖ Se obtuvieron {len(logs)} logs de auditor√≠a")
            
            # Verificar estructura si hay logs
            if logs and len(logs) > 0:
                required_fields = ['id_auditoria', 'tabla_afectada', 'operacion', 'fecha_operacion', 'id_usuario']
                validate_schema_fields(logs[0], required_fields, "Estructura log auditor√≠a")
        else:
            print("‚ö†Ô∏è  Respuesta no es una lista")


def test_auditoria_by_table():
    """Test de auditor√≠a por tabla"""
    print_test_header("Tests Auditor√≠a por Tabla")
    
    client = APITestClient()
    
    if not client.login():
        print("‚ùå No se pudo hacer login, saltando tests")
        return
    
    # Test logs de diferentes tablas
    tablas = ["usuarios", "personas", "sacramentos", "documentos"]
    
    for i, tabla in enumerate(tablas, 1):
        print(f"\n{i}Ô∏è‚É£ Test: Logs de auditor√≠a tabla '{tabla}'")
        response = client.get(f"/auditoria/logs/{tabla}")
        print_response_info(response, f"Logs tabla {tabla}")
        
        if response.status_code == 200:
            logs = response.json()
            if isinstance(logs, list):
                print(f"‚úÖ Se encontraron {len(logs)} logs para tabla {tabla}")


def test_auditoria_by_user():
    """Test de auditor√≠a por usuario"""
    print_test_header("Tests Auditor√≠a por Usuario")
    
    client = APITestClient()
    
    if not client.login():
        print("‚ùå No se pudo hacer login, saltando tests")
        return
    
    # Test 1: Logs del usuario actual
    print("\n1Ô∏è‚É£ Test: Logs del usuario actual")
    response = client.get("/auditoria/usuario/1")  # Asumiendo admin tiene ID 1
    print_response_info(response, "Logs del usuario ID 1")
    
    if response.status_code == 200:
        logs = response.json()
        if isinstance(logs, list):
            print(f"‚úÖ Se encontraron {len(logs)} logs para el usuario")
            
            # Verificar que todos los logs pertenecen al usuario
            if logs:
                user_ids = set(log.get('id_usuario') for log in logs)
                if len(user_ids) == 1 and 1 in user_ids:
                    print("‚úÖ Todos los logs pertenecen al usuario correcto")
                else:
                    print("‚ö†Ô∏è  Logs de m√∫ltiples usuarios o usuario incorrecto")


def test_auditoria_by_operation():
    """Test de auditor√≠a por tipo de operaci√≥n"""
    print_test_header("Tests Auditor√≠a por Operaci√≥n")
    
    client = APITestClient()
    
    if not client.login():
        print("‚ùå No se pudo hacer login, saltando tests")
        return
    
    # Test logs de diferentes operaciones
    operaciones = ["INSERT", "UPDATE", "DELETE"]
    
    for i, operacion in enumerate(operaciones, 1):
        print(f"\n{i}Ô∏è‚É£ Test: Logs de operaci√≥n '{operacion}'")
        response = client.get("/auditoria/logs", params={"operacion": operacion})
        print_response_info(response, f"Logs operaci√≥n {operacion}")
        
        if response.status_code == 200:
            logs = response.json()
            if isinstance(logs, list):
                print(f"‚úÖ Se encontraron {len(logs)} logs de operaci√≥n {operacion}")
                
                # Verificar que todos los logs son de la operaci√≥n correcta
                if logs:
                    operaciones_encontradas = set(log.get('operacion') for log in logs)
                    if len(operaciones_encontradas) == 1 and operacion in operaciones_encontradas:
                        print(f"‚úÖ Todos los logs son de operaci√≥n {operacion}")
                    else:
                        print(f"‚ö†Ô∏è  Logs de m√∫ltiples operaciones encontrados")


def test_auditoria_date_range():
    """Test de auditor√≠a por rango de fechas"""
    print_test_header("Tests Auditor√≠a por Rango de Fechas")
    
    client = APITestClient()
    
    if not client.login():
        print("‚ùå No se pudo hacer login, saltando tests")
        return
    
    # Test 1: Logs del √∫ltimo mes
    print("\n1Ô∏è‚É£ Test: Logs del √∫ltimo mes")
    response = client.get("/auditoria/logs", params={
        "fecha_inicio": "2024-01-01",
        "fecha_fin": "2024-01-31"
    })
    print_response_info(response, "Logs enero 2024")
    
    # Test 2: Logs del a√±o actual
    print("\n2Ô∏è‚É£ Test: Logs del a√±o 2024")
    response = client.get("/auditoria/logs", params={
        "fecha_inicio": "2024-01-01",
        "fecha_fin": "2024-12-31"
    })
    print_response_info(response, "Logs a√±o 2024")
    
    # Test 3: Logs de un d√≠a espec√≠fico
    print("\n3Ô∏è‚É£ Test: Logs de un d√≠a espec√≠fico")
    response = client.get("/auditoria/logs", params={
        "fecha_inicio": "2024-01-15",
        "fecha_fin": "2024-01-15"
    })
    print_response_info(response, "Logs del 15 enero 2024")


def test_auditoria_search():
    """Test de b√∫squeda en auditor√≠a"""
    print_test_header("Tests de B√∫squeda en Auditor√≠a")
    
    client = APITestClient()
    
    if not client.login():
        print("‚ùå No se pudo hacer login, saltando tests")
        return
    
    # Test 1: B√∫squeda por descripci√≥n
    print("\n1Ô∏è‚É£ Test: B√∫squeda por descripci√≥n")
    response = client.get("/auditoria/logs", params={"search": "usuario"})
    print_response_info(response, "B√∫squeda por 'usuario'")
    
    # Test 2: B√∫squeda combinada
    print("\n2Ô∏è‚É£ Test: B√∫squeda combinada")
    response = client.get("/auditoria/logs", params={
        "tabla_afectada": "usuarios",
        "operacion": "INSERT",
        "search": "admin"
    })
    print_response_info(response, "B√∫squeda combinada")


def test_auditoria_pagination():
    """Test de paginaci√≥n en auditor√≠a"""
    print_test_header("Tests de Paginaci√≥n - Auditor√≠a")
    
    client = APITestClient()
    
    if not client.login():
        print("‚ùå No se pudo hacer login, saltando tests")
        return
    
    # Test 1: Primera p√°gina
    print("\n1Ô∏è‚É£ Test: Primera p√°gina de logs")
    response = client.get("/auditoria/logs", params={"page": 1, "limit": 5})
    print_response_info(response, "P√°gina 1, l√≠mite 5")
    
    if response.status_code == 200:
        logs = response.json()
        if isinstance(logs, list):
            print(f"‚úÖ Se obtuvieron {len(logs)} logs (m√°ximo 5)")
            if len(logs) <= 5:
                print("‚úÖ Paginaci√≥n funcionando correctamente")
    
    # Test 2: Segunda p√°gina
    print("\n2Ô∏è‚É£ Test: Segunda p√°gina de logs")
    response = client.get("/auditoria/logs", params={"page": 2, "limit": 5})
    print_response_info(response, "P√°gina 2, l√≠mite 5")
    
    # Test 3: P√°gina con l√≠mite alto
    print("\n3Ô∏è‚É£ Test: P√°gina con l√≠mite alto")
    response = client.get("/auditoria/logs", params={"page": 1, "limit": 50})
    print_response_info(response, "P√°gina 1, l√≠mite 50")


def test_auditoria_statistics():
    """Test de estad√≠sticas de auditor√≠a"""
    print_test_header("Tests de Estad√≠sticas de Auditor√≠a")
    
    client = APITestClient()
    
    if not client.login():
        print("‚ùå No se pudo hacer login, saltando tests")
        return
    
    # Test 1: Estad√≠sticas generales
    print("\n1Ô∏è‚É£ Test: Estad√≠sticas generales de auditor√≠a")
    response = client.get("/auditoria/estadisticas")
    print_response_info(response, "Estad√≠sticas generales")
    
    if response.status_code == 200:
        stats = response.json()
        if isinstance(stats, dict):
            expected_fields = ['total_logs', 'operaciones_por_tipo', 'tablas_mas_activas']
            validate_schema_fields(stats, expected_fields, "Estad√≠sticas auditor√≠a")
    
    # Test 2: Estad√≠sticas por tabla
    print("\n2Ô∏è‚É£ Test: Estad√≠sticas por tabla")
    response = client.get("/auditoria/estadisticas/tabla/usuarios")
    print_response_info(response, "Estad√≠sticas tabla usuarios")
    
    # Test 3: Estad√≠sticas por usuario
    print("\n3Ô∏è‚É£ Test: Estad√≠sticas por usuario")
    response = client.get("/auditoria/estadisticas/usuario/1")
    print_response_info(response, "Estad√≠sticas usuario ID 1")


def test_auditoria_permissions():
    """Test de permisos en auditor√≠a"""
    print_test_header("Tests de Permisos - Auditor√≠a")
    
    # Test con usuario admin
    client_admin = APITestClient()
    
    if client_admin.login():
        print("\n1Ô∏è‚É£ Test: Admin accede a logs de auditor√≠a")
        response = client_admin.get("/auditoria/logs")
        print_response_info(response, "Admin - Acceso a logs")
        
        if response.status_code == 200:
            print("‚úÖ Admin tiene acceso completo a auditor√≠a")
        else:
            print("‚ùå Admin no puede acceder a auditor√≠a")
    
    # Nota: En un entorno real, aqu√≠ probar√≠amos con diferentes roles
    # para verificar que solo los usuarios autorizados pueden acceder


def run_all_auditoria_tests():
    """Ejecutar todos los tests de auditor√≠a"""
    print("üöÄ Iniciando Tests Completos de Auditor√≠a")
    print("=" * 80)
    
    test_auditoria_logs()
    test_auditoria_by_table()
    test_auditoria_by_user()
    test_auditoria_by_operation()
    test_auditoria_date_range()
    test_auditoria_search()
    test_auditoria_pagination()
    test_auditoria_statistics()
    test_auditoria_permissions()
    
    print("\n" + "=" * 80)
    print("üèÅ Tests de Auditor√≠a Completados")


if __name__ == "__main__":
    run_all_auditoria_tests()